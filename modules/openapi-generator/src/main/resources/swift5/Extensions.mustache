// Extensions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation{{#usePromiseKit}}
import PromiseKit{{/usePromiseKit}}{{#useVapor}}
import Vapor{{/useVapor}}

{{^useVapor}}
extension Bool: JSONEncodable {
    func encodeToJSON() -> Any { return self as Any }
}

extension Float: JSONEncodable {
    func encodeToJSON() -> Any { return self as Any }
}

extension Int: JSONEncodable {
    func encodeToJSON() -> Any { return self as Any }
}

extension Int32: JSONEncodable {
    func encodeToJSON() -> Any { return NSNumber(value: self as Int32) }
}

extension Int64: JSONEncodable {
    func encodeToJSON() -> Any { return NSNumber(value: self as Int64) }
}

extension Double: JSONEncodable {
    func encodeToJSON() -> Any { return self as Any }
}

extension String: JSONEncodable {
    func encodeToJSON() -> Any { return self as Any }
}

extension RawRepresentable where RawValue: JSONEncodable {
    func encodeToJSON() -> Any { return self.rawValue as Any }
}

private func encodeIfPossible<T>(_ object: T) -> Any {
    if let encodableObject = object as? JSONEncodable {
        return encodableObject.encodeToJSON()
    } else {
        return object as Any
    }
}

extension Array: JSONEncodable {
    func encodeToJSON() -> Any {
        return self.map(encodeIfPossible)
    }
}

extension Dictionary: JSONEncodable {
    func encodeToJSON() -> Any {
        var dictionary = [AnyHashable: Any]()
        for (key, value) in self {
            dictionary[key] = encodeIfPossible(value)
        }
        return dictionary as Any
    }
}

extension Data: JSONEncodable {
    func encodeToJSON() -> Any {
        return self.base64EncodedString(options: Data.Base64EncodingOptions())
    }
}

extension Date: JSONEncodable {
    func encodeToJSON() -> Any {
        return CodableHelper.dateFormatter.string(from: self) as Any
    }
}

extension URL: JSONEncodable {
    func encodeToJSON() -> Any {
        return self
    }
}

extension UUID: JSONEncodable {
    func encodeToJSON() -> Any {
        return self.uuidString
    }
}{{/useVapor}}

extension String: CodingKey {

    public var stringValue: String {
        return self
    }

    public init?(stringValue: String) {
        self.init(stringLiteral: stringValue)
    }

    public var intValue: Int? {
        return nil
    }

    public init?(intValue: Int) {
        return nil
    }

}

extension KeyedEncodingContainerProtocol {

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} mutating func encodeArray<T>(_ values: [T], forKey key: Self.Key) throws where T: Encodable {
        var arrayContainer = nestedUnkeyedContainer(forKey: key)
        try arrayContainer.encode(contentsOf: values)
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} mutating func encodeArrayIfPresent<T>(_ values: [T]?, forKey key: Self.Key) throws where T: Encodable {
        if let values = values {
            try encodeArray(values, forKey: key)
        }
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} mutating func encodeMap<T>(_ pairs: [Self.Key: T]) throws where T: Encodable {
        for (key, value) in pairs {
            try encode(value, forKey: key)
        }
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} mutating func encodeMapIfPresent<T>(_ pairs: [Self.Key: T]?) throws where T: Encodable {
        if let pairs = pairs {
            try encodeMap(pairs)
        }
    }

}

extension KeyedDecodingContainerProtocol {

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} func decodeArray<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T] where T: Decodable {
        var tmpArray = [T]()

        var nestedContainer = try nestedUnkeyedContainer(forKey: key)
        while !nestedContainer.isAtEnd {
            let arrayValue = try nestedContainer.decode(T.self)
            tmpArray.append(arrayValue)
        }

        return tmpArray
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} func decodeArrayIfPresent<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T]? where T: Decodable {
        var tmpArray: [T]?

        if contains(key) {
            tmpArray = try decodeArray(T.self, forKey: key)
        }

        return tmpArray
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} func decodeMap<T>(_ type: T.Type, excludedKeys: Set<Self.Key>) throws -> [Self.Key: T] where T: Decodable {
        var map: [Self.Key: T] = [:]

        for key in allKeys {
            if !excludedKeys.contains(key) {
                let value = try decode(T.self, forKey: key)
                map[key] = value
            }
        }

        return map
    }

}{{^useVapor}}

extension HTTPURLResponse {
    var isStatusCodeSuccessful: Bool {
        return Array(200 ..< 300).contains(statusCode)
    }
}{{/useVapor}}{{#usePromiseKit}}

extension RequestBuilder {
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} func execute() -> Promise<Response<T>> {
        let deferred = Promise<Response<T>>.pending()
        self.execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }
}{{/usePromiseKit}}{{#useVapor}}

public enum JSON: Content {
    case string(String)
    case int(Int)
    case double(Double)
    case bool(Bool)
    case dictionary([String: JSON])
    case array([JSON])

    enum Key: CodingKey {
        case string(String)
        case int(Int)

        init?(intValue: Int) {
            self = .int(intValue)
        }

        init?(stringValue: String) {
            self = .string(stringValue)
        }

        var intValue: Int? {
            switch self {
            case .int(let int):
                return int
            case.string:
                return nil
            }
        }

        var stringValue: String {
            switch self {
            case .int(let int):
                return int.description
            case.string(let string):
                return string
            }
        }
    }

    public init(from decoder: Decoder) throws {
        if let keyed = try? decoder.container(keyedBy: Key.self) {
            self = try .dictionary(.init(
                uniqueKeysWithValues: keyed.allKeys.map { key in
                    try (key.stringValue, keyed.decode(JSON.self, forKey: key))
                }
            ))
        } else if var unkeyed = try? decoder.unkeyedContainer() {
            self = try .array((0..<unkeyed.count!).map { i in
                try unkeyed.decode(JSON.self)
            })
        } else {
            let singleValue = try decoder.singleValueContainer()
            if let double = try? singleValue.decode(Double.self) {
                self = .double(double)
            } else if let int = try? singleValue.decode(Int.self) {
                self = .int(int)
            } else if let bool = try? singleValue.decode(Bool.self) {
                self = .bool(bool)
            } else {
                self = try .string(singleValue.decode(String.self))
            }
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .string(let string):
            var singleValue = encoder.singleValueContainer()
            try singleValue.encode(string)
        case .int(let int):
            var singleValue = encoder.singleValueContainer()
            try singleValue.encode(int)
        case .double(let double):
            var singleValue = encoder.singleValueContainer()
            try singleValue.encode(double)
        case .bool(let bool):
            var singleValue = encoder.singleValueContainer()
            try singleValue.encode(bool)
        case .dictionary(let dictionary):
            var keyed = encoder.container(keyedBy: Key.self)
            try dictionary.forEach { (key, value) in
                try keyed.encode(value, forKey: .string(key))
            }
        case .array(let array):
            var unkeyed = encoder.unkeyedContainer()
            try array.forEach { value in
                try unkeyed.encode(value)
            }
        }
    }

    public var stringValue: String? {
        if case .string(let str) = self {
            return str
        }
        return nil
    }

    public var intValue: Int? {
        if case .int(let int) = self {
            return int
        }
        return nil
    }

    public var doubleValue: Double? {
        if case .double(let double) = self {
            return double
        }
        return nil
    }

    public var boolValue: Bool? {
        if case .bool(let bool) = self {
            return bool
        }
        return nil
    }

    public var dictionaryValue: [String: JSON]? {
        if case .dictionary(let dictionary) = self {
            return dictionary
        }
        return nil
    }

    public var arrayValue: [JSON]? {
        if case .array(let array) = self {
            return array
        }
        return nil
    }
}

extension JSON: Hashable {
    public static func == (lhs: JSON, rhs: JSON) -> Bool {
        if case .string(let str1) = lhs, case .string(let str2) = rhs {
            return str1 == str2
        } else if case .int(let int1) = lhs, case .int(let int2) = rhs {
            return int1 == int2
        } else if case .double(let double1) = lhs, case .double(let double2) = rhs {
            return double1 == double2
        } else if case .bool(let bool1) = lhs, case .bool(let bool2) = rhs {
            return bool1 == bool2
        } else if case .dictionary(let dictionary1) = lhs, case .dictionary(let dictionary2) = rhs {
            return dictionary1 == dictionary2
        } else if case .array(let array1) = lhs, case .array(let array2) = rhs {
            return array1 == array2
        } else {
            return false
        }
    }

    public func hash(into hasher: inout Hasher) {
        switch self {
        case .string(let str):
            hasher.combine(str.hashValue)
        case .int(let int):
            hasher.combine(int.hashValue)
        case .double(let double):
            hasher.combine(double.hashValue)
        case .bool(let bool):
            hasher.combine(bool.hashValue)
        case .dictionary(let dictionary):
            hasher.combine(dictionary.hashValue)
        case .array(let array):
            hasher.combine(array.hashValue)
        }
    }
}

extension URL: Content { }

extension Bool: Content { }

extension Set: ResponseEncodable where Element: Content {
    public func encodeResponse(for request: Vapor.Request) -> EventLoopFuture<Vapor.Response> {
        let response = Vapor.Response()
        do {
            try response.content.encode(Array(self))
        } catch {
            return request.eventLoop.makeFailedFuture(error)
        }
        return request.eventLoop.makeSucceededFuture(response)
    }
}

extension Set: RequestDecodable where Element: Content {
    public static func decodeRequest(_ request: Vapor.Request) -> EventLoopFuture<Self> {
        do {
            let content = try request.content.decode([Element].self)
            return request.eventLoop.makeSucceededFuture(Set(content))
        } catch {
            return request.eventLoop.makeFailedFuture(error)
        }
    }
}

extension Set: Content where Element: Content { }

{{/useVapor}}
