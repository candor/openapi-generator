//
// ArrayTest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


internal struct ArrayTest: Codable, Hashable {

    internal var arrayOfString: [String]?
    internal var arrayArrayOfInteger: [[Int64]]?
    internal var arrayArrayOfModel: [[ReadOnlyFirst]]?

    internal init(arrayOfString: [String]? = nil, arrayArrayOfInteger: [[Int64]]? = nil, arrayArrayOfModel: [[ReadOnlyFirst]]? = nil) {
        self.arrayOfString = arrayOfString
        self.arrayArrayOfInteger = arrayArrayOfInteger
        self.arrayArrayOfModel = arrayArrayOfModel
    }
    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case arrayOfString = "array_of_string"
        case arrayArrayOfInteger = "array_array_of_integer"
        case arrayArrayOfModel = "array_array_of_model"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(arrayOfString, forKey: .arrayOfString)
        try container.encodeIfPresent(arrayArrayOfInteger, forKey: .arrayArrayOfInteger)
        try container.encodeIfPresent(arrayArrayOfModel, forKey: .arrayArrayOfModel)
    }

    // Decodable protocol methods

    internal init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        arrayOfString = try container.decodeIfPresent([String].self, forKey: .arrayOfString)
        arrayArrayOfInteger = try container.decodeIfPresent([[Int64]].self, forKey: .arrayArrayOfInteger)
        arrayArrayOfModel = try container.decodeIfPresent([[ReadOnlyFirst]].self, forKey: .arrayArrayOfModel)
    }
}

extension ArrayTest: Hashable {
    internal static func == (lhs: ArrayTest, rhs: ArrayTest) -> Bool {
        lhs.arrayOfString == rhs.arrayOfString &&
        lhs.arrayArrayOfInteger == rhs.arrayArrayOfInteger &&
        lhs.arrayArrayOfModel == rhs.arrayArrayOfModel
        
    }

    internal func hash(into hasher: inout Hasher) {
        hasher.combine(arrayOfString?.hashValue)
        hasher.combine(arrayArrayOfInteger?.hashValue)
        hasher.combine(arrayArrayOfModel?.hashValue)
        
    }
}

