//
// OuterComposite.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


internal struct OuterComposite: Codable, Hashable {

    internal var myNumber: Double?
    internal var myString: String?
    internal var myBoolean: Bool?

    internal init(myNumber: Double? = nil, myString: String? = nil, myBoolean: Bool? = nil) {
        self.myNumber = myNumber
        self.myString = myString
        self.myBoolean = myBoolean
    }
    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case myNumber = "my_number"
        case myString = "my_string"
        case myBoolean = "my_boolean"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(myNumber, forKey: .myNumber)
        try container.encodeIfPresent(myString, forKey: .myString)
        try container.encodeIfPresent(myBoolean, forKey: .myBoolean)
    }

    // Decodable protocol methods

    internal init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        myNumber = try container.decodeIfPresent(Double.self, forKey: .myNumber)
        myString = try container.decodeIfPresent(String.self, forKey: .myString)
        myBoolean = try container.decodeIfPresent(Bool.self, forKey: .myBoolean)
    }
}

extension OuterComposite: Hashable {
    internal static func == (lhs: OuterComposite, rhs: OuterComposite) -> Bool {
        lhs.myNumber == rhs.myNumber &&
        lhs.myString == rhs.myString &&
        lhs.myBoolean == rhs.myBoolean
        
    }

    internal func hash(into hasher: inout Hasher) {
        hasher.combine(myNumber?.hashValue)
        hasher.combine(myString?.hashValue)
        hasher.combine(myBoolean?.hashValue)
        
    }
}

